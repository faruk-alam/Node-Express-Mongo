What is Express?
Express is a Web Framework built upon Node.js.
Node.js is an amazing tool for building networking services and applications. It's Open Source, free, easy 
to extend, and very performant.
Express is the most popular Node.js framework because it requires minimum setup to start an application or 
an API and is fast, and unopinionated at the same time. In other words, it does not enforces its own 
philosophy that a application or API should be built in a specific way, unlike Rails and Django. Its 
flexibility can be calculated by the number of npm modules available which makes it pluggable at the same 
time. If you have basic knowledge of HTML, CSS, and JavaScript and how Node.js works in general, in no time 
you will be able to get started with Express.

Express was developed by TJ Holowaychuk and is now maintained by Node.js foundation and open source 
developers.


Before we start with mechanism of using Express as the backend framework, let us first explore why we should 
consider it using or the reasons of its popularity.

1.Express lets you build single page, multi-page, and hybrid web and mobile applications. Other common backend 
use is to provide an API for a client (whether web or mobile).
2.It comes with a default template engine, Jade which helps to facilitate the flow of data into a website 
structure and does support other template engines.
3.It supports MVC (Model-View-Controller), a very common architecture to design web applications.
4.It is cross-platform and is not limited to any particular operating system.
5.It leverages upon Node.js single threaded and asynchronous model.


You can install Express into any project with npm.

If you're in an empty folder, first create a new Node.js project with this command:

npm init -y
then run this:

npm install express --save
to install Express into the project.

The First "Hello, World" Example
The first example we're going to create is a simple Express Web Server.

Copy this code:

const express = require('express')
const app = express()

app.get('/', (req, res) => res.send('Hello World!'))
app.listen(3000, () => console.log('Server ready'))
Save this to an index.js file in your project root folder, and start the server using this command:

node index.js
You can open the browser to port 3000 on localhost and you should see the Hello World! message.

Those 4 lines of code do a lot behind the scenes.

First, we import the express package to the express value.

We instantiate an application by calling the express() method.

Once we have the application object, we tell it to listen for GET requests on the / path, using the get() 
method.

There is a method for every HTTP verb: get(), post(), put(), delete(), and patch():

app.get('/', (req, res) => { /* */ })
app.post('/', (req, res) => { /* */ })
app.put('/', (req, res) => { /* */ })
app.delete('/', (req, res) => { /* */ })
app.patch('/', (req, res) => { /* */ })
Those methods accept a callback function – which is called when a request is started – and we need to 
handle it.

We pass in an arrow function:

(req, res) => res.send('Hello World!')
Express sends us two objects in this callback, which we called req and res. They represent the Request and 
the Response objects.

Request and Response
Request is the HTTP request. It gives us all the request information, including the request parameters, 
the headers, the body of the request, and more.

Response is the HTTP response object that we'll send to the client.
What we do in this callback is send the 'Hello World!' string to the client, using the Response.send() 
method.

This method sets that string as the body, and it closes the connection.

The last line of the example actually starts the server, and tells it to listen on port 3000. We pass in a 
callback that is called when the server is ready to accept new requests.


Value	Description
domain	The cookie domain name
expires	Set the cookie expiration date. If missing, or 0, the cookie is a session cookie
httpOnly	Set the cookie to be accessible only by the web server. See HttpOnly
maxAge	Set the expiry time relative to the current time, expressed in milliseconds
path	The cookie path. Defaults to '/'
secure	Marks the cookie HTTPS only
signed	Set the cookie to be signed
sameSite	Value of SameSite
A cookie can be cleared with:

res.clearCookie('username')
How to Work with HTTP Headers
How to access HTTP headers values from a request
You can access all the HTTP headers using the Request.headers property:

app.get('/', (req, res) => {
  console.log(req.headers)
})
Use the Request.header() method to access one individual request header's value:

app.get('/', (req, res) => {
  req.header('User-Agent')
})
How to change any HTTP header value for a response
You can change any HTTP header value using Response.set():

res.set('Content-Type', 'text/html')
There is a shortcut for the Content-Type header, however:

res.type('.html')
// => 'text/html'

res.type('html')
// => 'text/html'

res.type('json')
// => 'application/json'

res.type('application/json')
// => 'application/json'

res.type('png')
// => image/png:
How to Handle Redirects
Redirects are common in Web Development. You can create a redirect using the Response.redirect() method:

res.redirect('/go-there')
This creates a 302 redirect.

A 301 redirect is made in this way:

res.redirect(301, '/go-there')

Value	Description
domain	The cookie domain name
expires	Set the cookie expiration date. If missing, or 0, the cookie is a session cookie
httpOnly	Set the cookie to be accessible only by the web server. See HttpOnly
maxAge	Set the expiry time relative to the current time, expressed in milliseconds
path	The cookie path. Defaults to '/'
secure	Marks the cookie HTTPS only
signed	Set the cookie to be signed
sameSite	Value of SameSite
A cookie can be cleared with:

res.clearCookie('username')
How to Work with HTTP Headers
How to access HTTP headers values from a request
You can access all the HTTP headers using the Request.headers property:

app.get('/', (req, res) => {
  console.log(req.headers)
})
Use the Request.header() method to access one individual request header's value:

app.get('/', (req, res) => {
  req.header('User-Agent')
})
How to change any HTTP header value for a response
You can change any HTTP header value using Response.set():

res.set('Content-Type', 'text/html')
There is a shortcut for the Content-Type header, however:

res.type('.html')
// => 'text/html'

res.type('html')
// => 'text/html'

res.type('json')
// => 'application/json'

res.type('application/json')
// => 'application/json'

res.type('png')
// => image/png:
Routing in Express
Routing is the process of determining what should happen when a URL is called, or also which parts of the 
application should handle a specific incoming request.

In the Hello World example we used this code:

app.get('/', (req, res) => { /* */ })
This creates a route that maps accessing the root domain URL / using the HTTP GET method to the response we 
want to provide.

Named parameters
What if we want to listen for custom requests? Maybe we want to create a service that accepts a string and 
returns it as uppercase – and we don't want the parameter to be sent as a query string, but as part of the 
URL. In a case like that, we use named parameters:

app.get('/uppercase/:theValue', (req, res) => res.send(req.params.theValue.toUpperCase()))
If we send a request to /uppercase/test, we'll get TEST in the body of the response.

You can use multiple named parameters in the same URL, and they will all be stored in req.params.

How to use a regular expression to match a path
You can use regular expressions to match multiple paths with one statement:

app.get(/post/, (req, res) => { /* */ })
will match /post, /post/first, /thepost, /posting/something, and so on.

Templates in Express
Express is capable of handling server-side template engines.
Template engines allow us to add data to a view, and generate HTML dynamically.
You can use many different template engines, including Pug, Handlebars, Mustache, EJS and more.

Understanding `res.redirect` and `res.render` in Express.js: Best Practices and Security Considerations.
Express.js provides a robust response object that helps you control how HTTP responses are sent to clients. 

res.redirect
The res.redirect method instructs the browser to navigate to a different URL. This redirection can be to a 
relative path within your application or to an absolute URL on an entirely different site. By default, if no 
HTTP status code is specified, Express sends a 302 ("Found") response.

How It Works
Triggering a Redirect:

When you call res.redirect(url), Express sets the Location header on the response. The client’s browser then 
makes a new request to that URL.

Relative vs. Absolute URLs:

Express supports both fully-qualified URLs (e.g., http://example.com) and relative URLs (e.g., /admin). When 
using relative URLs, the browser resolves them based on the current URL, which means that trailing slashes can 
affect the final resolved path. Keep this in mind to prevent unexpected navigation behaviors.

Examples
// Redirect to a relative URL within the same application
res.redirect('/admin');

// Redirect to an external site
res.redirect('http://example.com');

// Redirect with a specific HTTP status (e.g., 301 Moved Permanently)
res.redirect(301, 'http://example.com');

// Redirect relative to the current URL
res.redirect('post/new');

// Redirect back to the request referer (defaults to "/" if no referer is provided)
res.redirect('back');
Security Considerations for Redirects
Prevent Open Redirects:

If the redirect URL is constructed using user-supplied data, always sanitize and validate the input. 
Unsanitized redirects can be manipulated by attackers to send users to malicious websites.

Understanding Relative URL Resolution:

Because the browser handles relative URLs based on the current request URL, ensure that any dynamic composition
 of URLs does not inadvertently expose your users to unexpected destinations.

res.render
The res.render method is used for server-side view rendering. By combining a view template with supplied data,
 Express generates HTML that is sent to the client. This method leverages template engines like Pug, EJS, or 
 Handlebars.

How It Works
Template Engine Integration:

The first argument to res.render is the view name (a file path relative to your configured views directory). 
If a file extension isn’t specified, Express uses the view engine setting to determine the template file type.

Local Variables:

You can pass an object as a second argument to provide variables to the template. For example, { name: 'Tobi' }
 makes the name variable available within your template.

Using a Callback:

Optionally, a callback function can be provided. In this mode, res.render returns the rendered HTML string 
along with any errors but does not automatically send the response. It becomes the developer’s responsibility 
to handle the response (typically by calling res.send(html)).

Examples
// Render a view and automatically send the HTML response
res.render('index');

// Render a view with local variables
res.render('user', { name: 'Tobi' });

// Render a view using a callback and send the result manually
res.render('index', (err, html) => {
  if (err) {
    return next(err); // Handle error appropriately
  }
  res.send(html);
});
Security Considerations for Rendering Views
Never Trust User Input for View Paths:

The view file path should never be constructed from untrusted user input. Allowing user input to dictate the 
path could lead to directory traversal attacks or unauthorized file access.

Data Sanitization in Locals:

Data rendered on the client side must be properly escaped or sanitized to prevent cross-site scripting (XSS) 
vulnerabilities. Ensure that any variables passed into the locals object are safe.

Sensitive Data Exposure:

Be cautious not to include sensitive information (such as passwords, API keys, or personal data) in the data 
sent to your views.

View Caching:

In production, view caching is enabled by default to improve performance. You can control this behavior using 
the setting app.set('view cache', true) (or false during development).

Additional Security Best Practices
Validate All User Input:

Whether used in redirects or passed into view rendering, input from users should always be validated, 
sanitized, and encoded when necessary.

Implement Content Security Policy (CSP):

Enhance security by using a strict Content Security Policy. This helps mitigate XSS risks by controlling the 
sources from which content can be loaded. Libraries like Helmet can simplify CSP configuration.

Review and Configure Express Settings:

Familiarize yourself with additional security guidelines provided in the official Express documentation.

Summary
res.redirect:

Use this method when you need to change the client’s location. Always verify that any URL used in redirects is 
safe and free from manipulations that could lead to an open redirect vulnerability.

res.render:

Use it for server-side HTML generation. Ensure you never expose unsanitized user input in your view paths or 
template variables to protect against XSS and file system access risks.

By following these best practices and security considerations, you can build more robust and secure Express.js
applications.


