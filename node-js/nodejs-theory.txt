What is Node?
Node is a runtime environment where you can run JavaScript code "Outside the web browser". Node be like â€“ "Hey 
y'all, you give your JS code to me and I'll run it ðŸ˜Ž". It uses Google's V8 Engine to convert the 
JavaScript code to Machine Code.

Since Node runs JavaScript code outside the web browser, this means that it doesn't have access to certain 
features that are only available in the browser, like the DOM or the window object or even the localStorage.

This means that at any point in your code, you can't type in document.querySelector() or alert() as these 
will produce errors (This is what is shown in the below image).

How to Install NodeJS
Installing NodeJS is straightforward. If you already have Node installed in your machine, you can skip this 
section. If not, then follow along.

Here are the steps to download NodeJS on your machine:

Navigate to https://nodejs.org/
Download the LTS Version of NodeJS for your operating system
Run the installer and follow the installation wizard. Simply answer Yes to all the questions.
Once the installation is complete, open a new terminal or command prompt window and run the following 
command to verify that NodeJS is installed correctly: node -v. If you see the version of NodeJS printed in 
your terminal, Congratulations! You have now successfully installed NodeJS on your machine.

How to Run NodeJS Code
To run NodeJS code, you need to create a file with the .js extension and write your code in it. Once you have 
written your code, you can run it by using the node command followed by the name of the file.

For example, if you have a file named hello-node.js with the following code:

console.log("Hello, World!");
You can run it by typing the following command in your terminal:

node hello.js
This will print "Hello, World!" to your terminal.

Global Variables :
These are basically variables which store some data and can be accessed from anywhere in your code â€“ doesn't
matter how deeply nested the code is.
In NodeJS, there are several global variables that are available in all modules. Some of the most commonly 
used global variables are:

__dirname: This variable contains the directory name of the current module.
__filename: This variable contains the full path of the current module.

// __dirname Global Variable
console.log(__dirname);

// __filename Global Variable
console.log(__filename);
To run this code using Node, type in the following command in the terminal and press Enter: node 
global-variable.js. 
You will see the absolute path to the present working directory and the path to the current file is printed 
in the terminal.

You can go ahead and create your own global variables which can be accessed from anywhere in your code. You 
can do so, like this:

// Define a global variable in NodeJS
global.myVariable = 'Hello World';

// Access the global variable
console.log(myVariable); // Output: Hello World

process: This variable provides information about the current process.
require: This variable is used to import modules.
module: This variable provides information about the current module.
exports: This variable is used to export modules.

NodeJS Modules & require :
Modules are the basic building blocks of NodeJS. In Node.js, a module is essentially a reusable block of 
code that can be used to perform a specific set of tasks or provide a specific functionality. A module can 
contain variables, functions, classes, objects, or any other code that can be used to accomplish a 
particular task or set of tasks.
The primary purpose of using modules in Node.js is to help organize code into smaller, more manageable 
pieces. A modules can then be imported into another file using the require() function at any time.
To import something from a module, we use the require() method which accepts the path to the module.


The require() function is used to import modules in NodeJS. It takes a single argument, which is the path to 
the module file that you want to import. The require() function returns the exported object from the module 
file.

Every module has an object called "exports".""module.exports" is a special object in NodeJS that allows you 
to export functions, objects, or values from a module, so that other modules can access and use them. 

Types Of Modules in Node
There are 2 types of modules in NodeJS:

Built In Modules: These are modules included in Node by default, so you can use them without installation. 
You just need to import them and get started.

External Modules: These are modules created by other developers which are not included by default. So you 
need to install them first before using them.

Here are some of popular built-in modules in NodeJS:
1. os: This module provides information about the operating system, such as the hostname, platform, and 
architecture.
2. path: This module provides utilities for working with file and directory paths.
3. fs: This module provides an API for interacting with the file system, such as reading, writing, and 
deleting files.
4. http: This module provides an API for creating HTTP servers and clients.
5. events: This module provides an event-driven programming model, which allows you to define and 
handle events in your application.
6. crypto: This module provides cryptographic functionality, such as hashing and encryption.

The OS module:

The os module provides information about the operating system, such as the hostname, platform, and 
architecture. Here are some of the methods provided by the os module:

os.hostname(): This method returns the hostname of the operating system.
os.platform(): This method returns the platform of the operating system.
os.arch(): This method returns the architecture of the operating system.

To use this module, the first step is to import it like this:

const os = require('os');
This is how you can use the OS Module to get information about the Operating System:

const os = require('os')

// os.uptime()
const systemUptime = os.uptime();

// os.userInfo()
const userInfo = os.userInfo();

// We will store some other information about my WindowsOS in this object:
const otherInfo = {
    name: os.type(),
    release: os.release(),
    totalMem: os.totalmem(),
    freeMem: os.freemem(),
}

// Let's Check The Results:
console.log(systemUptime);
console.log(userInfo);
console.log(otherInfo);

This is the output of the above code:

Note that the output shows information about the Windows Operating System running on my system. The output 
could be different from yours.

521105
{
    uid: -1,
    gid: -1,
    username: 'krish',
    homedir: 'C:\\Users\\krish',
    shell: null
}
{
    name: 'Windows_NT',
    release: '10.0.22621',
    totalMem: 8215212032,
    freeMem: 1082208256
}
Let's break down the above code and output:

os.uptime() tells the system uptime in seconds. This function returns the number of seconds the system has 
been running since it was last rebooted. If you check the first line of the output: 521105 is the number of 
seconds, my system has been running since it was last rebooted. Of course, it will be different for you.
os.userInfo() gives the information about the current user. This function returns an object with information
about the current user including the user ID, group ID, username, home directory, and default shell. 
Below is the breakdown of the output in my case:
    {
        uid: -1,
        gid: -1,
        username: 'krish',
        homedir: 'C:\\Users\\krish',
        shell: null
    }
The uid and gid is set to -1 in Windows, because Windows does not have the concept of user IDs like 
Unix-based systems. The username of my OS is krish and the home directory is 'C:\\Users\\krish'. The shell 
is set to null because the concept of a default shell does not exist on Windows. Windows has a default 
command interpreter program called Command Prompt (cmd.exe), which runs commands and manages the system.

The other methods related to OS Module like os.type(), os.release() and so on, which you saw in the above 
code has been used within the otherInfo object. Here is a breakdown of what these methods do:

os.type() - Tells the name of the Operating System
os.release() - Tells the release version of the Operating System
os.totalMem() - Tells the total amount of memory available in bytes
os.freeMem() - Tells the total amount of free memory available in bytes
This is the information which the above methods display about my OS:

{
    name: 'WindowsNT', // Name of my OS
    release: '10.0.22621', // Release Version of my OS
    totalMem: 8215212032, // Total Memory Available in bytes (~ 8 GB)
    freeMem: 1082208256 // Free Memory Available in bytes (~ 1 GB) 
}
The path module : 

The PATH module comes in handy while working with file and directory paths. It provides you with various 
methods with which you can:

Join path segments together
Tell if a path is absolute or not
Get the last portion/segment of a path
Get the file extension from a path, and much more!
You an see the PATH Module in action in the code below.

Code:

// Import 'path' module using the 'require()' method:
const path = require('path')

// Assigning a path to the myPath variable
const myPath = '/mnt/c/Desktop/NodeJSTut/app.js'

const pathInfo = {
    fileName: path.basename(myPath),
    folderName: path.dirname(myPath),
    fileExtension: path.extname(myPath),
    absoluteOrNot: path.isAbsolute(myPath),
    detailInfo: path.parse(myPath),
}

// Let's See The Results:
console.log(pathInfo);
Output:

{
  fileName: 'app.js',
  folderName: '/mnt/c/Desktop/NodeJSTut',
  fileExtension: '.js',
  absoluteOrNot: true,
  detailInfo: {
    root: '/',
    dir: '/mnt/c/Desktop/NodeJSTut',
    base: 'app.js',
    ext: '.js',
    name: 'app'
  }
}
Let's have a detailed breakdown of the above code and its output:

The first and foremost step to work with path module is to import it in the app.js file using the require() 
method.

Next, we are assigning a path of some file to a variable called myPath. This can be a path to any random file. For the purpose of understanding the path module, I chose this: /mnt/c/Desktop/NodeJSTut/app.js.

Using the myPath variable, we will understand the path module in detail. Let's check out the functions 
which this module has to offer and what can we do with it:

path.basename(myPath): The basename() function accepts a path and returns the last part of that path. 
In our case, the last part of myPath is: app.js.

path.dirname(myPath): The dirname() function selects the last part of the path provided to it and returns 
the path to it's parent's directory. In our case, since the last part of myPath is app.js. The dirname() 
function returns the path to the parent directory of app.js (the folder inside which app.js file lies), 
i.e, /mnt/c/Desktop/NodeJSTut. It can be also thought as: the dirname() function simply excludes the last 
part of the path provided to it and returns the leftover path.

path.extname(myPath): This function checks for any extension on the last part of the provided path and it 
returns the file extension (if it exists), otherwise it returns an empty string: ''. In our case, since the 
last part is app.js and a file extension exists, we get '.js' as the output.

path.isAbsolute(myPath): This tells whether the provided path is absolute or not. On Unix-based systems 
(such as macOS and Linux), an absolute path always starts with the forward slash (/). On Windows systems, 
an absolute path can start with a drive letter (such as C:) followed by a colon (:), or with two backslashes 
(\\). Since the value stored in myPath variable starts with /, therefore isAbsolute() returns true.
However, if you just change the myPath variable to this: Desktop/NodeJSTut/app.js (converting it to a 
relative path), isAbsolute() returns false.

path.parse(myPath): This function accepts a path and returns an object which contains a detailed breakdown 
of the path provided to it. Here is what it returns when we provide the myPath variable to it:

root: The root of the path (in this case, /).
dir: The directory of the file (in this case, /mnt/c/Desktop/NodeJSTut).
base: The base file name (in this case, app.js).
ext: The file extension (in this case, .js).
name: The base name of the file, without the extension (in this case, app).
Before continuing with the other functions of the path module, we need to understand something called path 
separator and the path structure.

You must have seen that the path to a same file looks different in different Operating Systems. For example, 
consider the path to a file named example.txt located in a folder called Documents on the desktop of a 
Windows user:

C:\Users\username\Desktop\Documents\example.txt
On the other hand, the file path to the same file for a user on a macOS system would look like this:

/Users/username/Desktop/Documents/example.txt
2 differences are to be noted here:

Difference in path separators: In Windows, file paths use the backslash (\) as the separator between 
directories, while in macOS/Linux (which is a Unix-based system), file paths use the forward slash (/) as 
the separator.
Difference in root directory of the users files: On Windows, the root directory for a user's files is 
commonly found at C:\Users\username, whereas on macOS and Linux, it is located at /Users/username/. While 
this holds true for most Windows, macOS, and Linux systems, there may be some variations in the exact 
location of the user's home directory based on the system's configuration.
With this in mind, let's move ahead and understand some other functions provided by the path module:

path.sep: sep is a variable which contains the system specific path separator. For Windows machine: 
console.log(path.sep) prints \ in the console while in case of macOS or Linux, path.sep returns a forward 
slash ( / ).
path.join(<paths>): The path.join() function accepts path(s) as strings. It then joins those paths using 
the system specific path separator and returns the joined path. For example, consider this code:
console.log(path.join('grandParentFolder', 'parentFolder', 'child.txt'))
The above code prints different results for different Operating Systems.
In Windows, it will give this output: grandParentFolder\parentFolder\child.txt while in macOS/Linux, it will 
give this output: grandParentFolder/parentFolder/child.txt. Note that the difference is only in the path 
separators - backward slash and forward slash.

path.resolve(<paths>): This function works in a similar way as compared to path.join(). The path.resolve() 
function just joins the different paths provided to it using the system specific path separator and then 
appends the final output to the absolute path of the present working directory.
Suppose you are a Windows user and the absolute path to your present working directory is this: 
C:\Desktop\NodeJSTut, If you run this code:

console.log(path.resolve('grandParentFolder', 'parentFolder', 'child.txt'));
You will see the following output in the console:

C:\Desktop\NodeJSTut\grandParentFolder\parentFolder\child.txt
The same is applicable to a macOS or a Linux user. It's just the difference in the absolute path of the 
present working directory and the path separator.

The FS Module
This module helps you with file handling operations such as:

Reading a file (sync or async way)
Writing to a file (sync or async way)
Deleting a file
Reading the contents of a director
Renaming a file
Watching for changes in a file, and much more
Let's perform some of these tasks to see the fs (File System) module in action below:

How to create a directory using fs.mkdir()
The fs.mkdir() function in Node.js is used to create a new directory. It takes two arguments: the path of 
the directory to be created and an optional callback function that gets executed when the operation is 
complete.

path: Here, path refers to the location where you want to create a new folder. This can be an absolute or a 
relative path. In my case, the path to the present working directory (the folder I am currently in), is: C:
\Desktop\NodeJSTut. So, Let's create a folder in the NodeJSTut directory called myFolder.
callback function: The purpose of the callback function is to notify that the directory creation process 
has completed. This is necessary because the fs.mkdir() function is asynchronous, meaning that it does not 
block the execution of the rest of the code while the operation is in progress. Instead, it immediately 
returns control to the callback function, allowing it to continue executing other tasks. Once the directory 
has been created, the callback function is called with an error object (if any) and any other relevant data 
related to the operation. In the below code, we are just using it to display a success message in the 
console or any error.
// Import fs module
const fs = require('fs');

// Present Working Directory: C:\Desktop\NodeJSTut
// Making a new directory called ./myFolder:

fs.mkdir('./myFolder', (err) => {
    if(err){
        console.log(err);
    } else{
        console.log('Folder Created Successfully');
    }
})

How to create and write to a file asynchronously using fs.writeFile()
After the myFolder directory is created successfully, it's time to create a file and write something to it 
by using the fs module.

There are basically 2 ways of doing this:

Synchronous Approach: In this approach, we create a file and write the data to it in a blocking manner, 
which means that NodeJS waits for the creation and write operation to complete before moving on to the next 
line of code. If an error occurs during this process, it throws an exception that must be caught using 
try...catch.
Asynchronous Approach: In this approach, we create and write data to a file in a non-blocking manner, which 
means that NodeJS does not wait for the write operation to complete before moving on to the next line of 
code. Instead, it takes a callback function that gets called once the entire process is completed. If an e
rror occurs during the write operation, the error object is passed to the callback function

writeFile() is a method provided by the fs (file system) module in Node.js. It is used to write data to a 
file asynchronously. The method takes three arguments:

The path of the file to write to (including the file name and extension)
The data to write to the file (as a string or buffer)
An optional callback function that is called once the write operation is complete or an error occurs during 
the write operation.
When writeFile() is called, Node.js creates a new file or overwrites an existing file at the specified path.
 It then writes the provided data to the file and closes it. Since the method is asynchronous, the write 
 operation does not block the event loop, allowing other operations to be performed in the meantime.

Below is the code where we create a new file called myFile.txt in the myFolder directory and write this 
data to it: Hi,this is newFile.txt.

const fs = require('fs');

const data = "Hi,this is newFile.txt";

fs.writeFile('./myFolder/myFile.txt', data, (err)=> {
    if(err){
        console.log(err);
        return;
    } else {
        console.log('Writen to file successfully!');
    }
})
Since newFile.txt didn't exist previously, Hence the writeFile() function created this file for us on the 
provided path and then wrote the value in the data variable to the file. Suppose this file already existed. 
In that case, writeFile() will just open the file, erase all the existing text present in it and then write 
the data to it.

The problem with this code is: when you run the same code multiple times, it erases the previous data that 
is already present in newFile.txt and writes the data to it.

In case you do not want the original data to get deleted and just want the new data to be added/appended at 
the end of the file, you need to make a little change in the above code by adding this "options object": 
{flag: 'a'} as the third parameter to writeFile() â€“ like this:

const fs = require('fs');

const data = 'Hi,this is newFile.txt';

fs.writeFile('./myFolder/myFile.txt', data, {flag: 'a'}, (err) => {
    if(err){
        console.log(err);
        return;
    } else {
        console.log('Writen to file successfully!');
    }
})
Once you run the above code again and again, you will see that the myFile.txt has the value of the data 
variable written to it multiple times. This is because the object (3rd parameter): {flag: 'a'} indicates 
the writeFile() method to append the data at the end of the file instead of erasing the previous data 
present in it.

How to read a file asynchronously using fs.readFile()
After creating and writing to the file, it's time we learn how to read the data present in the file using 
the fs module.

Again there are 2 ways of doing this: Synchronous approach and the Asynchronous approach (just like the 
previous function). Here we are going to use the readFile() function provided by fs module which performs 
the reading operation asynchronously.

The readFile() function takes 3 parameters:

The path to the file which is to be read.
The encoding of the file.
The callback function that gets executed once the reading operation is completed or if any error occurs 
during the reading operation. It accepts 2 parameters: first parameter stores the file data 
(if read operation is successful) and the second parameter stores the error object (if read operation fails 
due to some error).
The readFile() function is very intuitive and once called, it reads the data present in the provided file 
according to the given encoding. If the read operation is successful, it returns the data to the callback 
function and if not, it will return the error occurred.

In the below code, we read the contents of the file - myFile.txt which we had created while learning the 
previous function and then log the data stored in it in the console.

const fs = require('fs');

fs.readFile('./myFolder/myFile.txt', {encoding: 'utf-8'}, (err, data) => {
    if(err){
        console.log(err);
        return;
    } else {
        console.log('File read successfully! Here is the data');
        console.log(data);
    }
})
It is to be noted here that the encoding property is set to 'utf-8'. At this point, some of you may not 
know about the encoding property, So Let's understand it in a bit more detail:

The encoding parameter in the fs.readFile() method of Node.js is used to specify the character encoding 
used to interpret the file data. By default, if no encoding parameter is provided, the method returns a raw 
buffer.

If the readFile() method is called without providing an encoding parameter, you will see a result similar 
to this printed in the console:

<Buffer 54 68 69 73 20 69 73 20 73 6f 6d 65 20 64 61 74 61 20 69 6e 20 61 20 66 69 6c 65>
This raw buffer is difficult to read and interpret as it represents the contents of the file in binary form.
 To convert the buffer to a readable string, you can specify an encoding parameter when calling readFile().

In our case, we specified the 'utf8' encoding as the second parameter of the readFile() method. This tells 
Node.js to interpret the file contents as a string using the UTF-8 character encoding, thus you see the 
original data printed in the console. Other common encodings that can be used with readFile() include:

'ascii': Interpret the file contents as ASCII-encoded text.
'utf16le': Interpret the file contents as 16-bit Unicode text in little-endian byte order.
'latin1': Interpret the file contents as ISO-8859-1 (also known as Latin-1) encoded text.


The fs.rename() method in Node.js is used to rename a file or directory. The method takes two arguments, the 
current file path and the new file path, and a callback function that is executed when the renaming is 
complete.

Here's the syntax for the fs.rename() method:

fs.rename(oldPath, newPath, callback);
where:

oldPath (string) - The current file path
newPath (string) - The new file path
callback (function) - A callback function to be executed when the renaming is complete. This function takes 
an error object as its only parameter.

Let's rename the newFile.txt file to newFileAsync.txt:

const fs = require('fs');

fs.rename('./newFolder/newFile.txt', './newFolder/newFileAsync.txt', (err)=>{
    if(err){
        console.log(err);
        return;
    }
    console.log('File renamed successfully!')
})
Once you run the above code, you will see that the newFile.txt gets renamed to newFileAsync.txt.

Note that you should only provide valid paths (absolute or relative) to the rename() function and not just 
the names of the files. Remember it's oldPath and newPath and NOT oldName and newName.

For example, consider this code: fs.rename('./newFolder/newFile.txt', 'newFileAsync.txt', ...rest of the 
code). In this case, since we did not provide a proper path in the 2nd parameter, rename() assumes that the 
path to the newly named file should be: ./newFileAsync.txt. Thus, it basically removes the newFile.txt from 
the newFolder directory, renames the file to newFileAsync.txt and moves it to the current working directory.