What is Node?
Node is a runtime environment where you can run JavaScript code "Outside the web browser". Node be like â€“ "Hey 
y'all, you give your JS code to me and I'll run it ðŸ˜Ž". It uses Google's V8 Engine to convert the 
JavaScript code to Machine Code.

Since Node runs JavaScript code outside the web browser, this means that it doesn't have access to certain 
features that are only available in the browser, like the DOM or the window object or even the localStorage.

This means that at any point in your code, you can't type in document.querySelector() or alert() as these 
will produce errors (This is what is shown in the below image).

How to Install NodeJS
Installing NodeJS is straightforward. If you already have Node installed in your machine, you can skip this 
section. If not, then follow along.

Here are the steps to download NodeJS on your machine:

Navigate to https://nodejs.org/
Download the LTS Version of NodeJS for your operating system
Run the installer and follow the installation wizard. Simply answer Yes to all the questions.
Once the installation is complete, open a new terminal or command prompt window and run the following 
command to verify that NodeJS is installed correctly: node -v. If you see the version of NodeJS printed in 
your terminal, Congratulations! You have now successfully installed NodeJS on your machine.

How to Run NodeJS Code
To run NodeJS code, you need to create a file with the .js extension and write your code in it. Once you have 
written your code, you can run it by using the node command followed by the name of the file.

For example, if you have a file named hello-node.js with the following code:

console.log("Hello, World!");
You can run it by typing the following command in your terminal:

node hello.js
This will print "Hello, World!" to your terminal.

Global Variables :
These are basically variables which store some data and can be accessed from anywhere in your code â€“ doesn't
matter how deeply nested the code is.
In NodeJS, there are several global variables that are available in all modules. Some of the most commonly 
used global variables are:

__dirname: This variable contains the directory name of the current module.
__filename: This variable contains the full path of the current module.

// __dirname Global Variable
console.log(__dirname);

// __filename Global Variable
console.log(__filename);
To run this code using Node, type in the following command in the terminal and press Enter: node 
global-variable.js. 
You will see the absolute path to the present working directory and the path to the current file is printed 
in the terminal.

You can go ahead and create your own global variables which can be accessed from anywhere in your code. You 
can do so, like this:

// Define a global variable in NodeJS
global.myVariable = 'Hello World';

// Access the global variable
console.log(myVariable); // Output: Hello World

process: This variable provides information about the current process.
require: This variable is used to import modules.
module: This variable provides information about the current module.
exports: This variable is used to export modules.

NodeJS Modules & require :
Modules are the basic building blocks of NodeJS. In Node.js, a module is essentially a reusable block of 
code that can be used to perform a specific set of tasks or provide a specific functionality. A module can 
contain variables, functions, classes, objects, or any other code that can be used to accomplish a 
particular task or set of tasks.
The primary purpose of using modules in Node.js is to help organize code into smaller, more manageable 
pieces. A modules can then be imported into another file using the require() function at any time.
To import something from a module, we use the require() method which accepts the path to the module.


The require() function is used to import modules in NodeJS. It takes a single argument, which is the path to 
the module file that you want to import. The require() function returns the exported object from the module 
file.

Every module has an object called "exports".""module.exports" is a special object in NodeJS that allows you 
to export functions, objects, or values from a module, so that other modules can access and use them. 

Types Of Modules in Node
There are 2 types of modules in NodeJS:

Built In Modules: These are modules included in Node by default, so you can use them without installation. 
You just need to import them and get started.

External Modules: These are modules created by other developers which are not included by default. So you 
need to install them first before using them.

Here are some of popular built-in modules in NodeJS:
1. os: This module provides information about the operating system, such as the hostname, platform, and 
architecture.
2. path: This module provides utilities for working with file and directory paths.
3. fs: This module provides an API for interacting with the file system, such as reading, writing, and 
deleting files.
4. http: This module provides an API for creating HTTP servers and clients.
5. events: This module provides an event-driven programming model, which allows you to define and 
handle events in your application.
6. crypto: This module provides cryptographic functionality, such as hashing and encryption.

The OS module:

The os module provides information about the operating system, such as the hostname, platform, and 
architecture. Here are some of the methods provided by the os module:

os.hostname(): This method returns the hostname of the operating system.
os.platform(): This method returns the platform of the operating system.
os.arch(): This method returns the architecture of the operating system.

To use this module, the first step is to import it like this:

const os = require('os');
This is how you can use the OS Module to get information about the Operating System:ðŸ‘‡

const os = require('os')

// os.uptime()
const systemUptime = os.uptime();

// os.userInfo()
const userInfo = os.userInfo();

// We will store some other information about my WindowsOS in this object:
const otherInfo = {
    name: os.type(),
    release: os.release(),
    totalMem: os.totalmem(),
    freeMem: os.freemem(),
}

// Let's Check The Results:
console.log(systemUptime);
console.log(userInfo);
console.log(otherInfo);

This is the output of the above code:

Note that the output shows information about the Windows Operating System running on my system. The output 
could be different from yours.

521105
{
    uid: -1,
    gid: -1,
    username: 'krish',
    homedir: 'C:\\Users\\krish',
    shell: null
}
{
    name: 'Windows_NT',
    release: '10.0.22621',
    totalMem: 8215212032,
    freeMem: 1082208256
}
Let's break down the above code and output:

os.uptime() tells the system uptime in seconds. This function returns the number of seconds the system has 
been running since it was last rebooted. If you check the first line of the output: 521105 is the number of 
seconds, my system has been running since it was last rebooted. Of course, it will be different for you.
os.userInfo() gives the information about the current user. This function returns an object with information
about the current user including the user ID, group ID, username, home directory, and default shell. 
Below is the breakdown of the output in my case:
    {
        uid: -1,
        gid: -1,
        username: 'krish',
        homedir: 'C:\\Users\\krish',
        shell: null
    }
The uid and gid is set to -1 in Windows, because Windows does not have the concept of user IDs like 
Unix-based systems. The username of my OS is krish and the home directory is 'C:\\Users\\krish'. The shell 
is set to null because the concept of a default shell does not exist on Windows. Windows has a default 
command interpreter program called Command Prompt (cmd.exe), which runs commands and manages the system.

The other methods related to OS Module like os.type(), os.release() and so on, which you saw in the above 
code has been used within the otherInfo object. Here is a breakdown of what these methods do:

os.type() - Tells the name of the Operating System
os.release() - Tells the release version of the Operating System
os.totalMem() - Tells the total amount of memory available in bytes
os.freeMem() - Tells the total amount of free memory available in bytes
This is the information which the above methods display about my OS:

{
    name: 'WindowsNT', // Name of my OS
    release: '10.0.22621', // Release Version of my OS
    totalMem: 8215212032, // Total Memory Available in bytes (~ 8 GB)
     freeMem: 1082208256 // Free Memory Available in bytes (~ 1 GB) 
}